name: CI/CD Pipeline

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build-and-test:
    name: CI - Lint & Test
    runs-on: ubuntu-latest

    env:
      DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Linting
        run: |
          black --check .
          isort --check-only .
          flake8 .

      - name: Run Tests
        run: pytest

  deploy:
    name: CD - Terraform & Deploy
    runs-on: ubuntu-latest
    needs: build-and-test

    env:
      IMAGE_TAG: latest
      REPO_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SSH_KEY_NAME: ${{ secrets.SSH_KEY_NAME }}
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
      
      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_db_user=$DB_USER" >> $GITHUB_ENV
          echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
          echo "TF_VAR_ssh_key_name=$SSH_KEY_NAME" >> $GITHUB_ENV
          echo "TF_VAR_docker_image=$REPO_URI:$IMAGE_TAG" >> $GITHUB_ENV
          echo "TF_VAR_database_url=$DATABASE_URL" >> $GITHUB_ENV

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin $REPO_URI

      - name: Build Docker image
        run: docker build -t $REPO_URI:$IMAGE_TAG .

      - name: Push Docker image to ECR
        run: docker push $REPO_URI:$IMAGE_TAG

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment
